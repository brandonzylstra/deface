#!/bin/zsh

# deface: A script to regenerate Git commit hashes until a "fancy" hash is found
# Works by amending the current commit with new timestamps ONLY - never includes working tree changes

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  echo "Error: Not in a git repository."
  exit 1
fi

# Check if we have a commit to work with
if ! git rev-parse HEAD &>/dev/null; then
  echo "Error: No commits found in repository."
  exit 2
fi

# CRITICAL SAFETY CHECK: Absolutely refuse to run if there are uncommitted changes
# echo "Warning: You have uncommitted changes. These won't be included in the hash calculation."
# echo "Consider committing or stashing your changes first."
# read -q "REPLY?Continue anyway? (y/n) "
# echo ""
# if [[ ! $REPLY =~ ^[Yy]$ ]]; then
#   exit 3
# fi
if ! git diff-index --quiet HEAD --; then
  echo "⛔️ ERROR: You have uncommitted changes. This script WILL NOT run with uncommitted changes."
  echo "Please commit or stash your changes first to prevent data loss."
  exit 3
fi

# Define the minimum length for a meaningful match
MIN_LENGTH=4

# COMPREHENSIVE list of words spelled ONLY with actual hexadecimal characters (0-9, a-f)
# These are words that appear directly in SHA1 hashes without substitution
fancy_words=(
  # Pure Hex Words (a-f only)
  "ace" "aced" "bad" "bade" "bead" "beef" "cab" "cad" "cafe" "cede"
  "dace" "dad" "dead" "deaf" "decaf" "deed" "face" "facade" "fade"
  "faded" "fee" "feed" "fad"

  # Computing/Hacker Culture Classics
  "c0ffee" "deadbeef" "feedface" "cafebabe" "defaced" "c0debabe"
  "badcafe" "beefcafe" "deadc0de" "faceb00c" "feedc0de" "abcdef" "baddeed"
  "ba5eba11" "decade"

  # Words with 0 (zero) for "o"
  "ab0de" "b0de" "b0ld" "b0lt" "b0red" "b0ss" "b00k" "b00t"
  "c0at" "c0de" "c0ffee" "c0ld" "c00l" "c00k" "c0re" "c0st" "d00r" "f00d"
  "f00l" "f00t" "f0ld" "l0ad" "l0af" "l0cal" "l0ck" "l0ft" "l0ss"
  "l0st" "l0ve" "m0de" "n0de" "n0te" "r00f" "r00m" "r0ad" "r0ck" "r0le"
  "s0fa" "s0ft" "s0ld" "t00l" "t0e" "t0ne"

  # Words with 1 (one) for "i/l"
  "a1d" "a1m" "b1d" "b1t" "b1te" "d1ce" "d1e" "f1le" "f1ll"
  "f1ne" "f1re" "f1ve" "f1x" "1ce" "1dea" "l1fe" "l1st" "l1ve"
  "m1le" "m1nd" "m1ss" "s1de" "s1te" "t1de" "t1le"

  # Words with 5 for "s"
  "ba5e" "ca5e" "cla55" "d15c" "fa5t" "f15h" "la5t" "l15t" "lo5e" "lo5t"
  "m15s" "5ad" "5afe" "5ale" "5alt" "5ea" "5eat" "5ee" "5eed" "5ell"

  # Words with numbers that still work in hex (4+ chars)
  "a55" "a55et" "a55ess" "b055" "ba55" "ca55" "cla55" "c0a5t" "c0ffe5" "c001"
  "d1ce" "dea1" "ea5e" "ea5t" "face5" "f1e1d" "f1e5" "f00d5" "f055" "10ad"
  "1055" "105e" "105t" "5a1e5" "5ca1e" "5ee5" "5eed5" "51ab" "51ate" "51ed"

  # Common short recognizable words (4-5 chars)
  "ace" "acid" "babe" "face" "cab" "cad" "cafe" "dad" "daft"
  "dead" "deaf" "deal" "deed" "dice" "doll" "east" "ease" "face"
  "fact" "fade" "fail" "feed" "feel" "fee" "feet" "fell" "file"
  "fill" "flat" "fled" "flee" "foal" "foe" "cell" "coal"
  "bass" "abed" "aced" "acce55" "ba5ed" "ba55"

  # Longer recognizable words (6+ chars)
  "accede" "acce55" "ace5" "added" "affable" "beef" "beefed" "ceded"
  "deface" "defaced" "effaced" "feebee" "facade" "f01ded" "1dea5"
  "f1e1d5" "5ca1e5" "5eeded" "decade"

  # Tech-specific or computing terms
  "acce55" "c0de" "c0dec" "ca11" "ca11ed" "ca5e" "c1a55" "database" "defect"
  "delete" "facade" "feed" "f11e" "1dea" "5ca1ab1e"

  # Funny/Cool Words as actual hex
  "badfeed" "ba5eba11" "beaded" "beef" "caffeed" "ca5cade" "c1a551c"
  "deadfa11" "defaced" "facaded" "feedface" "facef00d"
)

# Determine maximum word length to know how many characters to check in each hash
max_length=8  # Let's cap at 8 chars, which is standard for Git hash prefixes

echo "deface: Searching for fancy Git SHA1 hashes..."
echo "Minimum word length to match: $MIN_LENGTH characters"
echo "Maximum word length to match: $max_length characters"
echo "Word list contains ${#fancy_words[@]} possible matches (all using actual hex characters)"

# Get the original commit details to preserve them
original_hash=$(git rev-parse HEAD)
echo "Original hash: $original_hash"

# Store the commit message to preserve it exactly
commit_message=$(git log -1 --pretty=%B)

# Counter for attempts
attempt=0
start_time=$(date +%s)

# Function to check if a hash prefix matches any word in our list
function check_hash_match() {
  local hash=$1
  local prefix=${hash:0:$max_length}

  for word in $fancy_words; do
    word_length=${#word}
    # Only consider matches of our minimum length or longer
    if [[ $word_length -ge $MIN_LENGTH && ${prefix:0:$word_length} == $word ]]; then
      echo "✅ Match found: ${prefix:0:$word_length} (from $hash)"
      return 0
    fi
  done

  return 1
}

# Keep trying until we find a match
while true; do
  ((attempt++))

  # Calculate a new timestamp (current time plus random offset in seconds)
  # This creates a unique commit timestamp for each attempt
  random_offset=$((RANDOM % 1000))
  new_timestamp=$(date -R -v+${random_offset}S 2>/dev/null || date -R --date="$random_offset seconds")

  # SAFETY: Use --allow-empty to ensure we're ONLY changing the timestamp
  # This prevents any staged but uncommitted changes from being included
  env GIT_COMMITTER_DATE="$new_timestamp" git commit --amend --no-edit --date="$new_timestamp" --allow-empty >/dev/null

  # Get the new hash
  new_hash=$(git rev-parse HEAD)

  # Display progress every 5 attempts
  if (( attempt % 5 == 0 )); then
    current_time=$(date +%s)
    elapsed=$((current_time - start_time))
    rate=$(printf "%.1f" $(echo "$attempt / $elapsed" | bc -l 2>/dev/null || echo "$attempt / $elapsed" | awk '{printf "%.1f", $1}'))
    echo "Attempt $attempt ($rate hashes/sec): $new_hash"
  fi

  # Check if the hash matches any word in our list
  if check_hash_match $new_hash; then
    end_time=$(date +%s)
    total_time=$((end_time - start_time))
    echo "\nSuccess after $attempt attempts and $total_time seconds!"
    echo "Final hash: $new_hash"
    exit 0
  fi
done
