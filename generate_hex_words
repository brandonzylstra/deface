#!/bin/zsh

# generate_hex_words
# Script to generate a comprehensive list of words that can be spelled using hexadecimal characters
# Uses the system dictionary on macOS/BSD systems
# Usage:
#   ./generate_hex_words             # Generate full word list
#   ./generate_hex_words --test      # Quick test mode (stops after 10 words)

# Check for test mode flag
TEST_MODE=false
if [[ "$1" == "--test" ]]; then
    TEST_MODE=true
    echo "Running in TEST MODE - will exit after finding 10 words"
fi

# Path to system dictionary
DICT_FILE="/usr/share/dict/words"

# Check if dictionary file exists
if [[ ! -f "$DICT_FILE" ]]; then
    echo "Dictionary file not found at $DICT_FILE."
    echo "Trying alternative locations..."

    # Try alternative locations
    ALTERNATIVES=(
        "/usr/dict/words"
        "/usr/share/dict/american-english"
        "/usr/share/dict/british-english"
        "/opt/local/share/dict/words"
    )

    for alt in "${ALTERNATIVES[@]}"; do
        if [[ -f "$alt" ]]; then
            DICT_FILE="$alt"
            echo "Found dictionary at $DICT_FILE"
            break
        fi
    done

    if [[ ! -f "$DICT_FILE" ]]; then
        echo "Could not find a dictionary file. Please specify one:"
        read DICT_FILE

        if [[ ! -f "$DICT_FILE" ]]; then
            echo "Error: File not found. Exiting."
            exit 1
        fi
    fi
fi

# Minimum word length to consider
MIN_LENGTH=4

# Output file (not used in test mode)
OUTPUT_FILE="hex_words.txt"

echo "Generating hexadecimal words list from $DICT_FILE..."
echo "Words must be at least $MIN_LENGTH characters long."
if [[ "$TEST_MODE" == true ]]; then
    echo "Test mode: Will stop after finding 10 words"
fi

# Function to check if a word can be represented in hex (with substitutions)
# Global variable to store the converted word
CONVERTED_WORD=""

function is_hex_word() {
    local word=$(echo "$1" | tr '[:upper:]' '[:lower:]')  # Convert to lowercase

    # Remove any word with characters that can't be represented in hex
    # Allow: a-f (direct), 0-9, plus words with j,k,m,n,p,q,r,s,t,u,v,w,x,y,z
    # that can be substituted

    # Check if the word contains any non-substitutable characters
    if echo "$word" | grep -q '[hjkmnpqruvwxyz]'; then
        # For words with these characters, apply substitution rules

        # These words need at least one valid substitution to be considered
        # 0 -> o, 1 -> i/l, 5 -> s, 6 -> g, 2 -> z, 3 -> e, 4 -> a, 7 -> t, 8 -> b, 9 -> g

        # h,j,k,m,n,p,q,r,u,v,w,x,y,z cannot be represented in hex even with substitutions
        # Actually many can with complex substitutions but we'll keep it simple
        if echo "$word" | grep -q '[hjkmqruvwxyz]'; then
            CONVERTED_WORD=""
            return 1  # Cannot be represented in hex even with substitutions
        fi

        # Convert words with substitutable letters
        local converted=$(echo "$word" | sed 's/o/0/g; s/i/1/g; s/l/1/g; s/s/5/g; s/g/6/g; s/z/2/g; s/e/3/g; s/a/4/g; s/t/7/g; s/b/8/g')

        # Check if the converted word is now in hex
        if echo "$converted" | grep -q '[^0-9a-f]'; then
            return 1  # Still contains non-hex characters
        fi
        
        # Store the converted word
        CONVERTED_WORD="$converted"
    fi

    # If word already only contains hex chars, store it as is
    if ! echo "$word" | grep -q '[^0-9a-f]'; then
        CONVERTED_WORD="$word"
    fi
    return 0  # Is a valid hex word (or can be with substitutions)
}

# Process dictionary and prepare for output
if [[ "$TEST_MODE" == false ]]; then
    # Create output file with header
    echo "# Hexadecimal Words (generated from $DICT_FILE)" > "$OUTPUT_FILE"
    echo "# Words that can be spelled using only a-f and 0-9 (after substitutions)" >> "$OUTPUT_FILE"
    echo "# These words are ALREADY SUBSTITUTED and ready for direct hash matching" >> "$OUTPUT_FILE"
    echo "# Minimum length: $MIN_LENGTH characters" >> "$OUTPUT_FILE"
    echo "# Generated on $(date)" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
fi

# Collect valid hex words
declare -a valid_words
count=0
test_examples=0

while read -r word; do
    # Skip words that are too short
    if [[ ${#word} -lt $MIN_LENGTH ]]; then
        continue
    fi

    # Convert to lowercase for processing
    word=$(echo "$word" | tr '[:upper:]' '[:lower:]')

    # Reset the converted word variable
    CONVERTED_WORD=""
    
    # Check if this word can be represented in hex
    if is_hex_word "$word"; then
        # Use the converted word (with number substitutions) instead of the original
        if [[ -n "$CONVERTED_WORD" ]]; then
            valid_words+=("\"$CONVERTED_WORD\"")
        else
            valid_words+=("\"$word\"")
        fi
        ((count++))
        
        # In test mode, display each word and exit after 10
        if [[ "$TEST_MODE" == true ]]; then
            ((test_examples++))
            echo "Found hex word $test_examples: $CONVERTED_WORD (from \"$word\")"
            if (( test_examples >= 10 )); then
                echo "Test complete - found 10 words"
                exit 0
            fi
        # In normal mode, show progress every 1000 words
        elif (( count % 1000 == 0 )); then
            echo "Processed $count valid words so far..."
        fi
    fi
done < "$DICT_FILE"

# Only write to file in normal mode
if [[ "$TEST_MODE" == false ]]; then
    # Write the array to the output file
    echo "fancy_words=(" >> "$OUTPUT_FILE"

    # Join the array with spaces
    joined_words=$(printf "%s " "${valid_words[@]}")
    echo "$joined_words" >> "$OUTPUT_FILE"

    echo ")" >> "$OUTPUT_FILE"

    echo "Done! Found $count valid hexadecimal words (already substituted with numbers)."
    echo "Word list saved to $OUTPUT_FILE"
else
    echo "Test mode complete."
fi
